#include "calculations.h"

calculations::calculations()
{
start ();
}
void calculations::start () // функция начала вычислений
{
/* функция начала вычислений 
вызывается при старте программы
1) читает входные данные
2) если данные прочитать удалось 
3) возводит флаг готовности начала вычислений
4) вызывает функцию предварительной подготовки данных */
}
void calculations::set_state (bool state) // функция запуска остановки алгоритма
{
}
bool calculations::get_state () // функция получения состояния алгоритма
{
}
void calculations::prepar_data  () // предварительная подготовка данных
{
// для ввода количества итераций, точности рассчета, начальных значений переменных
}
void calculations::form_funktion()  // формирование рассчетной функции
{
// написание формул для вычисления
}

void calculations::form_grad ()  // формирование градиента 
{
/* Функция формирования градиента 
вызывается итеративно
Коэффициент рассчитывается по всем функциям, затем суммируется */
}
void calculations::check_grad  () //  функция проверки градиента
{
/* вызывается итеративно. Проверяет
1) градиент стремится к нулю
2) градиент не изменяется */

}

void calculations::work_calculate  () // функция формирования шага градиента
{
/* вызывается в цикле
рассчитывает шаг градиента для всех переменных */
}
void calculations::form_new_param () // функция формирования новых значений параметров
{
/* вызывается итеративно
Рассчитывает приближенное значение параметров с учетом градиентов */

}
void calculations::check_new_param  () // проверка достижения необходимой точности вычислений
{
/*  Если разность старых и новых параметрах меньше заданной точности останавливаем алгоритм  */
}
void calculations::substitution  () // подстановка значений
{
/* функция вызывается циклически
Подставляет новые полученные значения для дальнейшего рассчета градиентов */
}
void calculations::check_iteration  () // проверка на количество итераций
{
/* функция вызывается итеративно.
Если количество итераций больше заданного останавливаем алгоритм*/
}
void calculations::calculate_work () // функция цикла вычислений
{
// вызываются другие функции алгоритма вычислений
}
void calculations::file_result  () // функция записи результатов и ошибок
{

}
